import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "junit.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/bag/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>BagTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.bag.mutable.primitive;

import org.eclipse.collections.api.bag.primitive.Mutable<name>Bag;
<junit()>

/**
 * JUnit test for {@link Synchronized<name>Bag}.
 * This file was automatically generated from template file synchronizedPrimitiveBagTest.stg.
 */
public class Synchronized<name>BagTest extends AbstractMutable<name>BagTestCase
{
    @Override
    protected Synchronized<name>Bag classUnderTest()
    {
        return new Synchronized<name>Bag(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected Synchronized<name>Bag newWith(<type>... elements)
    {
        return new Synchronized<name>Bag(<name>HashBag.newBagWith(elements));
    }

    @Override
    @Test
    public void asSynchronized()
    {
        super.asSynchronized();
        Synchronized<name>Bag bag = this.classUnderTest();
        Mutable<name>Bag bagWithLockObject = new Synchronized<name>Bag(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), new Object());
        Assertions.assertEquals(bag, bagWithLockObject);
        Assertions.assertSame(bagWithLockObject, bagWithLockObject.asSynchronized());
        Assertions.assertSame(bag, bag.asSynchronized());
        Assertions.assertEquals(bag, bag.asSynchronized());
    }
}

>>

