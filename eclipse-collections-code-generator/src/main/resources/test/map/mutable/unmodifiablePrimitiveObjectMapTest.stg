import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "junit.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>ObjectMapTest"

skipBoolean() ::= "true"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.mutable.primitive;

import java.util.Iterator;
import java.util.NoSuchElementException;

import org.eclipse.collections.api.block.function.Function;
import org.eclipse.collections.api.block.function.Function0;
import org.eclipse.collections.api.block.function.Function2;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.map.primitive.Mutable<name>ObjectMap;
import org.eclipse.collections.impl.factory.Iterables;
import org.eclipse.collections.api.set.MutableSet;
import org.eclipse.collections.impl.block.factory.Functions0;
import org.eclipse.collections.impl.block.function.AddFunction;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.set.mutable.UnifiedSet;
import org.eclipse.collections.api.set.primitive.<name>Set;
import org.eclipse.collections.impl.set.mutable.primitive.<name>HashSet;
import org.eclipse.collections.impl.test.Verify;
import org.eclipse.collections.impl.tuple.primitive.PrimitiveTuples;
<junit()>

/**
 * JUnit test for {@link Unmodifiable<name>ObjectMap}.
 * This file was automatically generated from template file unmodifiablePrimitiveObjectMapTest.stg.
 */
public class Unmodifiable<name>ObjectMapTest extends AbstractMutable<name>ObjectMapTestCase
{
    private final Unmodifiable<name>ObjectMap\<String> map = this.classUnderTest();

    @Override
    protected Unmodifiable<name>ObjectMap\<String> classUnderTest()
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(<(literal.(type))("0")>, "zero", <(literal.(type))("31")>, "thirtyOne", <(literal.(type))("32")>, "thirtyTwo"));
    }

    @Override
    protected \<T> Unmodifiable<name>ObjectMap\<T> newWithKeysValues(<type> key1, T value1)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1));
    }

    @Override
    protected \<T> Unmodifiable<name>ObjectMap\<T> newWithKeysValues(<type> key1, T value1, <type> key2, T value2)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2));
    }

    @Override
    protected \<T> Unmodifiable<name>ObjectMap\<T> newWithKeysValues(<type> key1, T value1, <type> key2, T value2, <type> key3, T value3)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3));
    }

    @Override
    protected \<T> Unmodifiable<name>ObjectMap\<T> getEmptyMap()
    {
        return new Unmodifiable<name>ObjectMap\<>(new <name>ObjectHashMap\<>());
    }

    @Override
    @Test
    public void clear()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.clear());
    }

    @Override
    @Test
    public void removeKey()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.removeKey(<(literal.(type))("5")>));
    }

    @Override
    @Test
    public void remove()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.remove(<(literal.(type))("5")>));
    }

    @Override
    @Test
    public void put()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.put(<(literal.(type))("0")>, "one"));
    }

    @Override
    @Test
    public void putPair()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.putPair(PrimitiveTuples.pair(<(literal.(type))("0")>, "one")));
    }

    @Override
    @Test
    public void putAll()
    {
        <name>ObjectHashMap\<String> hashMap = <name>ObjectHashMap.newMap();
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.putAll(hashMap));
    }

    @Override
    @Test
    public void withKeysValues()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.withKeyValue(<(literal.(type))("1")>, "one"));
    }

    @Override
    @Test
    public void withoutKey()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.withoutKey(<(literal.(type))("32")>));
    }

    @Override
    @Test
    public void withoutAllKeys()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.map.withoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>)));
    }

    @Override
    @Test
    public void withAllKeyValues()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.map.withAllKeyValues(Iterables.iList(PrimitiveTuples.pair(<(literal.(type))("1")>, "one"))));
    }

    @Override
    @Test
    public void putDuplicateWithRemovedSlot()
    {
        <type> collision1 = AbstractMutable<name>ObjectMapTestCase.generateCollisions().getFirst();
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().put(collision1, "one"));
    }

<if(primitive.floatingPoint)>
    <NaNTests("NaN")>
    <NaNTests("POSITIVE_INFINITY")>
    <NaNTests("NEGATIVE_INFINITY")>
    <ZeroTests()>
<endif>
    @Override
    @Test
    public void get()
    {
        Assertions.assertEquals("zero", this.map.get(<(literal.(type))("0")>));
        Assertions.assertEquals("thirtyOne", this.map.get(<(literal.(type))("31")>));
        Assertions.assertEquals("thirtyTwo", this.map.get(<(literal.(type))("32")>));

        Assertions.assertNull(this.map.get(<(literal.(type))("1")>));
        Assertions.assertNull(this.map.get(<(literal.(type))("33")>));
    }

    @Override
    @Test
    public void getIfAbsent()
    {
        Function0\<String> ifAbsent = () -> "ifAbsent";

        Assertions.assertEquals("zero", this.map.getIfAbsent(<(literal.(type))("0")>, ifAbsent));
        Assertions.assertEquals("thirtyOne", this.map.getIfAbsent(<(literal.(type))("31")>, ifAbsent));
        Assertions.assertEquals("thirtyTwo", this.map.getIfAbsent(<(literal.(type))("32")>, ifAbsent));

        Assertions.assertEquals("ifAbsent", this.map.getIfAbsent(<(literal.(type))("1")>, ifAbsent));
        Assertions.assertEquals("ifAbsent", this.map.getIfAbsent(<(literal.(type))("33")>, ifAbsent));
    }

    @Override
    @Test
    public void getIfAbsentPut_Value()
    {
        Assertions.assertEquals("zero", this.map.getIfAbsentPut(<(literal.(type))("0")>, "zeroValue"));
    }

    @Test
    public void getIfAbsentPut_Value_throws()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.getIfAbsentPut(<(literal.(type))("1")>, "oneValue"));
    }

    @Override
    @Test
    public void getIfAbsentPut_Function()
    {
        Assertions.assertEquals("zero", this.map.getIfAbsentPut(<(literal.(type))("0")>, () -> "zeroValue"));
    }

    @Test
    public void getIfAbsentPut_Function_throws()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.map.getIfAbsentPut(<(literal.(type))("1")>, () -> "oneValue"));
    }

    @Override
    @Test
    public void getIfAbsentPutWith()
    {
        Function\<String, String> toUpperCase = String::toUpperCase;
        Assertions.assertEquals("zero", this.map.getIfAbsentPutWith(<(literal.(type))("0")>, toUpperCase, "zeroValue"));
    }

    @Test
    public void getIfAbsentPutWithThrowsException()
    {
        Function\<String, String> toUpperCase = String::toUpperCase;
        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.map.getIfAbsentPutWith(<(literal.(type))("1")>, toUpperCase, "zeroValue"));
    }

    @Override
    @Test
    public void getIfAbsentPutWithKey()
    {
        <name>ToObjectFunction\<String> toString = String::valueOf;
        Assertions.assertEquals("zero", this.map.getIfAbsentPutWithKey(<(literal.(type))("0")>, toString));
    }

    @Test
    public void getIfAbsentPutWithKeyThrowsException()
    {
        <name>ToObjectFunction\<String> toString = String::valueOf;
        Assertions.assertThrows(UnsupportedOperationException.class, () -> this.map.getIfAbsentPutWithKey(<(literal.(type))("1")>, toString));
    }

    @Override
    @Test
    public void removeIf()
    {
        Assertions.assertThrows(UnsupportedOperationException.class, () -> super.removeIf());
    }

    @Override
    @Test
    public void freeze()
    {
        Mutable<name>ObjectMap\<String> mutable<name>ObjectMap = this.classUnderTest();
        <name>Set frozenSet = mutable<name>ObjectMap.keySet().freeze();
        <name>Set frozenSetCopy = <name>HashSet.newSetWith(mutable<name>ObjectMap.keySet().toArray());
        Assertions.assertEquals(frozenSet, frozenSetCopy);
    }

    @Override
    @Test
    public void updateValue()
    {
        Function\<Integer, Integer> incrementFunction = (Integer integer) -> integer + 1;
        Function0\<Integer> zeroFactory = Functions0.value(0);

        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.\<Integer>getEmptyMap().updateValue(<(literal.(type))("0")>, zeroFactory, incrementFunction));
    }

    @Override
    @Test
    public void updateValueWith()
    {
        Function2\<Integer, Integer, Integer> incrementFunction = AddFunction.INTEGER;
        Function0\<Integer> zeroFactory = Functions0.value(0);

        Assertions.assertThrows(UnsupportedOperationException.class, () ->
                this.\<Integer>getEmptyMap().updateValueWith(<(literal.(type))("0")>, zeroFactory, incrementFunction, 1));
    }

    @Override
    @Test
    public void contains()
    {
        Assertions.assertFalse(this.map.contains(null));
        Assertions.assertTrue(this.map.contains("zero"));
        Assertions.assertTrue(this.map.contains("thirtyOne"));
        Assertions.assertTrue(this.map.contains("thirtyTwo"));
    }

    @Override
    @Test
    public void containsKey()
    {
        Assertions.assertTrue(this.map.containsKey(<(literal.(type))("0")>));
        Assertions.assertTrue(this.map.containsKey(<(literal.(type))("31")>));
        Assertions.assertTrue(this.map.containsKey(<(literal.(type))("32")>));
        Assertions.assertFalse(this.map.containsKey(<(literal.(type))("1")>));
        Assertions.assertFalse(this.map.containsKey(<(literal.(type))("5")>));
        Assertions.assertFalse(this.map.containsKey(<(literal.(type))("35")>));
    }

    @Override
    @Test
    public void containsValue()
    {
        Assertions.assertFalse(this.map.containsValue(null));
        Assertions.assertTrue(this.map.containsValue("zero"));
        Assertions.assertTrue(this.map.containsValue("thirtyOne"));
        Assertions.assertTrue(this.map.containsValue("thirtyTwo"));
    }

    @Override
    @Test
    public void size()
    {
        Assertions.assertEquals(0, this.getEmptyMap().size());
        Assertions.assertEquals(1, this.newWithKeysValues(<(literal.(type))("0")>, "zero").size());
        Assertions.assertEquals(1, this.newWithKeysValues(<(literal.(type))("1")>, "one").size());

        Assertions.assertEquals(2, this.newWithKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("5")>, "five").size());
        Assertions.assertEquals(2, this.newWithKeysValues(<(literal.(type))("0")>, "zero", <(literal.(type))("5")>, "five").size());
        Assertions.assertEquals(3, this.newWithKeysValues(<(literal.(type))("1")>, "one", <(literal.(type))("0")>, "zero", <(literal.(type))("5")>, "five").size());
        Assertions.assertEquals(2, this.newWithKeysValues(<(literal.(type))("6")>, "six", <(literal.(type))("5")>, "five").size());
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        super.asUnmodifiable();
        Assertions.assertSame(this.map, this.map.asUnmodifiable());
    }

    @Override
    @Test
    public void iterator()
    {
        MutableSet\<String> expected = UnifiedSet.newSetWith("zero", "one", "thirtyOne", "thirtyTwo");
        MutableSet\<String> actual = UnifiedSet.newSet();

        Iterator\<String> iterator = <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("0")>, "zero",
                <(literal.(type))("31")>, "thirtyOne", <(literal.(type))("32")>, "thirtyTwo")
                .withKeyValue(<(literal.(type))("1")>, "one").asUnmodifiable().iterator();
        Assertions.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assertions.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assertions.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assertions.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assertions.assertFalse(iterator.hasNext());

        Assertions.assertEquals(expected, actual);
        Assertions.assertThrows(NoSuchElementException.class, iterator::next);

        Unmodifiable<name>ObjectMap\<String> map1 = this.newWithKeysValues(<(literal.(type))("0")>, "zero", <(literal.(type))("1")>, "one");
        Iterator\<String> iterator1 = map1.iterator();
        Assertions.assertThrows(UnsupportedOperationException.class, iterator1::remove);
        iterator1.next();
        Assertions.assertThrows(UnsupportedOperationException.class, iterator1::remove);
    }

    @Override
    @Test
    public void flipUniqueValues()
    {
        super.flipUniqueValues();

        Verify.assertInstanceOf(UnmodifiableObject<name>Map.class, this.classUnderTest().flipUniqueValues());
    }
}

>>

NaNTests(key) ::= <<
@Override
@Test
public void put_<key>()
{
    Mutable<name>ObjectMap\<String> map = this.getEmptyMap();
    Assertions.assertThrows(UnsupportedOperationException.class, () -> map.put(<wrapperName>.<key>, "one"));
}

>>

ZeroTests() ::= <<
@Override
@Test
public void put_zero()
{
    Mutable<name>ObjectMap\<String> map = this.getEmptyMap();
    Assertions.assertThrows(UnsupportedOperationException.class, () -> map.put(<(literal.(type))("0")>, "one"));
}

>>
